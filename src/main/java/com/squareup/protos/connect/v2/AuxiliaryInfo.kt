// Code generated by Wire protocol buffer compiler, do not edit.
package com.squareup.protos.connect.v2

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * --
 * @desc A generic key-value pair that contains auxiliary information about the payment.
 * --
 */
public class AuxiliaryInfo(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  public val key: String? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  public val value: String? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<AuxiliaryInfo, AuxiliaryInfo.Builder>(ADAPTER, unknownFields) {
  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.key = key
    builder.value = value
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AuxiliaryInfo) return false
    if (unknownFields != other.unknownFields) return false
    if (key != other.key) return false
    if (value != other.value) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + key.hashCode()
      result = result * 37 + value.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (key != null) result += """key=${sanitize(key)}"""
    if (value != null) result += """value=${sanitize(value)}"""
    return result.joinToString(prefix = "AuxiliaryInfo{", separator = ", ", postfix = "}")
  }

  public fun copy(
    key: String? = this.key,
    value: String? = this.value,
    unknownFields: ByteString = this.unknownFields
  ): AuxiliaryInfo = AuxiliaryInfo(key, value, unknownFields)

  public class Builder : Message.Builder<AuxiliaryInfo, Builder>() {
    @JvmField
    public var key: String? = null

    @JvmField
    public var value: String? = null

    public fun key(key: String?): Builder {
      this.key = key
      return this
    }

    public fun value(value: String?): Builder {
      this.value = value
      return this
    }

    public override fun build(): AuxiliaryInfo = AuxiliaryInfo(
      key = key,
      value = value,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<AuxiliaryInfo> = object : ProtoAdapter<AuxiliaryInfo>(
      FieldEncoding.LENGTH_DELIMITED, 
      AuxiliaryInfo::class, 
      "type.googleapis.com/squareup.connect.v2.AuxiliaryInfo", 
      PROTO_2, 
      null
    ) {
      public override fun encodedSize(value: AuxiliaryInfo): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.key)
        size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.value)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: AuxiliaryInfo): Unit {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.value)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): AuxiliaryInfo {
        var key: String? = null
        var value: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> key = ProtoAdapter.STRING.decode(reader)
            2 -> value = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return AuxiliaryInfo(
          key = key,
          value = value,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: AuxiliaryInfo): AuxiliaryInfo = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
